// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.3
// - protoc             v4.23.4
// source: taa_engine/v1/taa_engine.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationTaaEngineCreateTaaEngine = "/api.taa_engine.v1.TaaEngine/CreateTaaEngine"

type TaaEngineHTTPServer interface {
	// CreateTaaEngine Sample function
	CreateTaaEngine(context.Context, *CreateTaaEngineRequest) (*CreateTaaEngineResponse, error)
}

func RegisterTaaEngineHTTPServer(s *http.Server, srv TaaEngineHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/taaEngines", _TaaEngine_CreateTaaEngine0_HTTP_Handler(srv))
}

func _TaaEngine_CreateTaaEngine0_HTTP_Handler(srv TaaEngineHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateTaaEngineRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTaaEngineCreateTaaEngine)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateTaaEngine(ctx, req.(*CreateTaaEngineRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateTaaEngineResponse)
		return ctx.Result(200, reply)
	}
}

type TaaEngineHTTPClient interface {
	CreateTaaEngine(ctx context.Context, req *CreateTaaEngineRequest, opts ...http.CallOption) (rsp *CreateTaaEngineResponse, err error)
}

type TaaEngineHTTPClientImpl struct {
	cc *http.Client
}

func NewTaaEngineHTTPClient(client *http.Client) TaaEngineHTTPClient {
	return &TaaEngineHTTPClientImpl{client}
}

func (c *TaaEngineHTTPClientImpl) CreateTaaEngine(ctx context.Context, in *CreateTaaEngineRequest, opts ...http.CallOption) (*CreateTaaEngineResponse, error) {
	var out CreateTaaEngineResponse
	pattern := "/v1/taaEngines"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTaaEngineCreateTaaEngine))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
